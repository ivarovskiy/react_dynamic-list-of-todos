{"version":3,"sources":["components/TodoList/TodoList.tsx","api.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","title","sortBy","handleChange","event","target","name","value","setState","getSortedBySelected","todos","filter","todo","completed","getSearchTodos","toLowerCase","includes","this","props","todosByStatus","todosByInput","className","type","id","placeholder","onChange","map","classNames","readOnly","userId","selectedUserId","onClick","selectUser","React","Component","API_URL","getTodos","a","fetch","then","result","json","getUserById","CurrentUser","user","loadUser","prevProps","email","phone","unselectUser","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f5108fa.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[]\n  selectUser: (userId: number) => void,\n  selectedUserId: number\n};\n\ninterface State {\n  title: string,\n  sortBy: string,\n}\n\ntype EventType = React.ChangeEvent<\nHTMLInputElement | HTMLSelectElement\n>;\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    title: '',\n    sortBy: '',\n  };\n\n  handleChange = (event: EventType) => {\n    const { name, value } = event.target;\n\n    this.setState((state) => (\n      {\n        ...state,\n        [name]: value,\n      }\n    ));\n  };\n\n  getSortedBySelected = (todos: Todo[]) => {\n    switch (this.state.sortBy) {\n      case 'complited':\n        return todos.filter(todo => todo.completed);\n\n      case 'active':\n        return todos.filter(todo => !todo.completed);\n\n      default:\n        return todos;\n    }\n  };\n\n  getSearchTodos = (todos: Todo[]) => {\n    const { title } = this.state;\n\n    if (title) {\n      return todos.filter(todo => todo.title.toLowerCase().includes(title.toLowerCase()));\n    }\n\n    return todos;\n  };\n\n  render() {\n    const { todos } = this.props;\n    const todosByStatus = this.getSortedBySelected(todos);\n    const todosByInput = this.getSearchTodos(todosByStatus);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <input\n            type=\"text\"\n            name=\"title\"\n            id=\"sortByText\"\n            placeholder=\"Find a todo\"\n            value={this.state.title}\n            onChange={this.handleChange}\n          />\n\n          <select\n            name=\"sortBy\"\n            id=\"sortBySelect\"\n            value={this.state.sortBy}\n            onChange={this.handleChange}\n          >\n            <option value=\"all\">\n              Show all\n            </option>\n            <option value=\"complited\">\n              Complited\n            </option>\n            <option value=\"active\">\n              Active\n            </option>\n          </select>\n\n          <ul className=\"TodoList__list\">\n            {todosByInput.map((todo) => (\n              <li\n                key={todo.id}\n                className={classNames('TodoList__item',\n                  { 'TodoList__item--unchecked': !todo.completed },\n                  { 'TodoList__item--checked': todo.completed })}\n              >\n                <>{ /* eslint-disable-next-line jsx-a11y/label-has-associated-control */}</>\n                <label>\n                  <input type=\"checkbox\" readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames('TodoList__user-button', 'button',\n                    { 'TodoList__user-button--selected ': todo.userId === this.props.selectedUserId })}\n                  type=\"button\"\n                  onClick={() => this.props.selectUser(todo.userId)}\n                >\n                  {`User: ${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const API_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  return fetch(`${API_URL}/todos`)\n    .then(result => result.json());\n};\n\nexport const getUserById = (userId: number) => {\n  return fetch(`${API_URL}/users/${userId}`)\n    .then(result => result.json());\n};\n","import React from 'react';\nimport { getUserById } from '../../api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  selectedUserId: number,\n  unselectUser: () => void,\n};\n\ninterface State {\n  user: User | null,\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.selectedUserId !== prevProps.selectedUserId) {\n      this.loadUser();\n    }\n  }\n\n  loadUser = () => {\n    try {\n      getUserById(this.props.selectedUserId)\n        .then((user) => {\n          this.setState({ user });\n        });\n    } catch {\n      this.setState({ user: null });\n    }\n  };\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      <>\n        <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n        <p className=\"CurrentUser__email\">{user?.email}</p>\n        <p className=\"CurrentUser__phone\">{user?.phone}</p>\n        <button\n          onClick={() => this.props.unselectUser()}\n          type=\"button\"\n          className=\"button\"\n        >\n          Clear users\n        </button>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\ninterface State {\n  selectedUserId: number,\n  todos: Todo[],\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  componentDidMount() {\n    getTodos().then((todos) => {\n      this.setState({ todos });\n    });\n  }\n\n  selectUser = (userId: number): void => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  unselectUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                unselectUser={this.unselectUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}